{
  "version": 3,
  "sources": ["../../../app/components/ui/dialog.tsx", "../../../node_modules/@radix-ui/react-dialog/dist/packages/react/dialog/src/index.ts", "../../../node_modules/@radix-ui/react-dialog/dist/packages/react/dialog/src/Dialog.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\ui\\\\\\\\dialog.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\ui\\\\dialog.tsx\");\n  import.meta.hot.lastModified = \"1710131653000\";\n}\n// REMIX HMR END\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"~/lib/utils\";\nconst Dialog = DialogPrimitive.Root;\nconst DialogTrigger = DialogPrimitive.Trigger;\nconst DialogPortal = DialogPrimitive.Portal;\nconst DialogClose = DialogPrimitive.Close;\nconst DialogOverlay = React.forwardRef(_c = ({\n  className,\n  ...props\n}, ref) => <DialogPrimitive.Overlay ref={ref} className={cn(\"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\", className)} {...props} />);\n_c2 = DialogOverlay;\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\nconst DialogContent = React.forwardRef(_c3 = ({\n  className,\n  children,\n  ...props\n}, ref) => <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content ref={ref} className={cn(\"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-slate-200 bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg dark:border-slate-800 dark:bg-slate-950\", className)} {...props}>\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-slate-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-slate-100 data-[state=open]:text-slate-500 dark:ring-offset-slate-950 dark:focus:ring-slate-300 dark:data-[state=open]:bg-slate-800 dark:data-[state=open]:text-slate-400\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>);\n_c4 = DialogContent;\nDialogContent.displayName = DialogPrimitive.Content.displayName;\nconst DialogHeader = ({\n  className,\n  ...props\n}) => <div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />;\n_c5 = DialogHeader;\nDialogHeader.displayName = \"DialogHeader\";\nconst DialogFooter = ({\n  className,\n  ...props\n}) => <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />;\n_c6 = DialogFooter;\nDialogFooter.displayName = \"DialogFooter\";\nconst DialogTitle = React.forwardRef(_c7 = ({\n  className,\n  ...props\n}, ref) => <DialogPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)} {...props} />);\n_c8 = DialogTitle;\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\nconst DialogDescription = React.forwardRef(_c9 = ({\n  className,\n  ...props\n}, ref) => <DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-slate-500 dark:text-slate-400\", className)} {...props} />);\n_c10 = DialogDescription;\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\nexport { Dialog, DialogPortal, DialogOverlay, DialogClose, DialogTrigger, DialogContent, DialogHeader, DialogFooter, DialogTitle, DialogDescription };\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"DialogOverlay$React.forwardRef\");\n$RefreshReg$(_c2, \"DialogOverlay\");\n$RefreshReg$(_c3, \"DialogContent$React.forwardRef\");\n$RefreshReg$(_c4, \"DialogContent\");\n$RefreshReg$(_c5, \"DialogHeader\");\n$RefreshReg$(_c6, \"DialogFooter\");\n$RefreshReg$(_c7, \"DialogTitle$React.forwardRef\");\n$RefreshReg$(_c8, \"DialogTitle\");\n$RefreshReg$(_c9, \"DialogDescription$React.forwardRef\");\n$RefreshReg$(_c10, \"DialogDescription\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n} from './Dialog';\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n} from './Dialog';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentRef: React.RefObject<DialogContentElement>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ninterface DialogProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createDialogContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface DialogPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <PortalProvider scope={__scopeDialog} forceMount={forceMount}>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <PortalPrimitive asChild container={container}>\n            {child}\n          </PortalPrimitive>\n        </Presence>\n      ))}\n    </PortalProvider>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (beacuse of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning titleId={context.titleId} />\n            <DescriptionWarning contentRef={contentRef} descriptionId={context.descriptionId} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ElementRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ElementRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = Radix.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype TitleWarningProps = { titleId?: string };\n\nconst TitleWarning: React.FC<TitleWarningProps> = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) throw new Error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<DialogContentElement>;\n  descriptionId?: string;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    // if we have an id and the user hasn't set aria-describedby={undefined}\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n"],
  "mappings": "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",
  "names": ["DIALOG_NAME", "createDialogContext", "createDialogScope", "createContextScope", "DialogProvider", "useDialogContext", "Dialog", "props", "open", "openProp", "modal", "triggerRef", "React", "contentRef", "setOpen", "useControllableState", "prop", "defaultProp", "defaultOpen", "onChange", "onOpenChange", "$67UHm$createElement", "__scopeDialog", "useId", "prevOpen", "children", "TRIGGER_NAME", "DialogTrigger", "React", "props", "forwardedRef", "triggerProps", "context", "useDialogContext", "__scopeDialog", "composedTriggerRef", "useComposedRefs", "triggerRef", "$67UHm$createElement", "open", "contentId", "getState", "composeEventHandlers", "onClick", "onOpenToggle", "PORTAL_NAME", "PortalProvider", "usePortalContext", "createDialogContext", "forceMount", "undefined", "DialogPortal", "props", "container", "context", "useDialogContext", "__scopeDialog", "$67UHm$createElement", "React", "map", "children", "child", "open", "OVERLAY_NAME", "DialogOverlay", "React", "props", "forwardedRef", "portalContext", "usePortalContext", "__scopeDialog", "forceMount", "overlayProps", "context", "useDialogContext", "modal", "$67UHm$createElement", "open", "DialogOverlayImpl", "React", "props", "forwardedRef", "overlayProps", "context", "useDialogContext", "OVERLAY_NAME", "__scopeDialog", "$67UHm$createElement", "Slot", "contentRef", "getState", "open", "pointerEvents", "style", "CONTENT_NAME", "DialogContent", "portalContext", "usePortalContext", "forceMount", "contentProps", "modal", "DialogContentModal", "React", "props", "forwardedRef", "context", "useDialogContext", "CONTENT_NAME", "__scopeDialog", "contentRef", "composedRefs", "useComposedRefs", "content", "current", "hideOthers", "$67UHm$createElement", "open", "composeEventHandlers", "onCloseAutoFocus", "event", "preventDefault", "triggerRef", "focus", "onPointerDownOutside", "originalEvent", "detail", "ctrlLeftClick", "button", "ctrlKey", "isRightClick", "onFocusOutside", "DialogContentNonModal", "hasInteractedOutsideRef", "hasPointerDownOutsideRef", "defaultPrevented", "onInteractOutside", "type", "target", "targetIsTrigger", "contains", "DialogContentImpl", "contentProps", "useFocusGuards", "$67UHm$Fragment", "trapFocus", "onOpenAutoFocus", "contentId", "descriptionId", "titleId", "getState", "onOpenChange", "process", "TITLE_NAME", "DialogTitle", "titleProps", "DESCRIPTION_NAME", "DialogDescription", "React", "props", "forwardedRef", "descriptionProps", "context", "useDialogContext", "__scopeDialog", "$67UHm$createElement", "descriptionId", "CLOSE_NAME", "DialogClose", "React", "props", "forwardedRef", "closeProps", "context", "useDialogContext", "__scopeDialog", "$67UHm$createElement", "composeEventHandlers", "onClick", "onOpenChange", "getState", "open", "TITLE_WARNING_NAME", "WarningProvider", "useWarningContext", "createContext", "contentName", "CONTENT_NAME", "titleName", "TITLE_NAME", "docsSlug", "Root", "Dialog", "Trigger", "DialogTrigger", "Portal", "DialogPortal", "Overlay", "DialogOverlay", "Content", "DialogContent", "Title", "DialogTitle", "Description", "DialogDescription", "Close", "DialogClose"]
}
