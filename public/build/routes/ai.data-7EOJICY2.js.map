{
  "version": 3,
  "sources": ["../../../app/routes/ai.data.tsx", "../../../app/components/columns-insight-chat.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\ai.data.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\ai.data.tsx\");\n  import.meta.hot.lastModified = \"1711201555234.0923\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { columns } from \"../components/columns-insight-chat\";\nimport { DataTable } from \"../components/data-table-insights\";\nimport taskData from \"../data/insightdata/tasks.json\";\nimport { ChatBubbleOvalLeftEllipsisIcon } from \"@heroicons/react/24/outline\";\nfunction handleChatGPTStream(prompt, onData) {\n  const eventSource = new EventSource(`/demo/gpt?prompt=${encodeURIComponent(prompt)}`);\n  eventSource.onmessage = event => {\n    const data = JSON.parse(event.data);\n    if (data.type === \"done\") {\n      eventSource.close();\n    } else {\n      let content = data?.choices?.[0]?.delta?.content;\n      if (content) {\n        onData(content);\n      }\n    }\n  };\n  eventSource.onerror = event => {\n    console.error(\"EventSource failed:\", event);\n    eventSource.close();\n  };\n}\nconst tabs = [{\n  name: \"Conversations\",\n  href: \"#\",\n  count: \"52\",\n  current: false\n}, {\n  name: \"Prompts\",\n  href: \"#\",\n  count: \"6\",\n  current: true\n}];\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(\" \");\n}\nasync function getTasks() {\n  const data = await taskData;\n\n  //   const tasks = JSON.parse(data.toString());\n\n  return data;\n}\nexport const loader = async () => {\n  const tasks = await getTasks();\n  return json({\n    tasks\n  });\n};\nexport default function MyComponent() {\n  _s();\n  const {\n    tasks\n  } = useLoaderData();\n  const [messages, setMessages] = useState([]);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const endOfMessagesRef = useRef(null);\n  const textareaRef = useRef(null);\n  const appendToLastMessage = newText => {\n    setMessages(prevMessages => {\n      const lastMessage = prevMessages[prevMessages.length - 1];\n      if (lastMessage && lastMessage.role === \"gpt\") {\n        return [...prevMessages.slice(0, -1), {\n          ...lastMessage,\n          content: lastMessage.content + newText\n        }];\n      } else {\n        return [...prevMessages, {\n          role: \"gpt\",\n          content: newText\n        }];\n      }\n    });\n  };\n  useEffect(() => {\n    endOfMessagesRef.current?.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return <div className=\"w-full\">\r\n      <div className={`flex ${isSidebarOpen ? \"\" : \"xl:flex\"} h-screen`}>\r\n        <div className=\"flex h-screen w-full flex-col items-center bg-white\">\r\n          <div className=\"max-w-4xl w-4/6 mx-auto  flex-grow overflow-y-auto\">\r\n            <div className=\"mx-auto mt-2 flex w-full max-w-full text-base\">\r\n              <div className=\"relative flex  h-10 w-10  items-center justify-center rounded-lg bg-white border text-blue-900 \">\r\n                <ChatBubbleOvalLeftEllipsisIcon className=\"h-6 w-6\" />\r\n              </div>\r\n\r\n              <div className=\"relative inset-0 mx-2 flex w-full flex-col rounded-lg border p-4 text-gray-800 shadow-lg bg-white\">\r\n                <div className=\"font-semibold text-blue-900\">ChatGPT</div>\r\n                <p className=\"break-words text-lg\">\r\n                  what are the backorders within product families and SKUs\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* chat with cahrt */}\r\n\r\n            <div className=\"my-4 flex text-base\">\r\n             \r\n              <div className=\"mx-2 w-full p-0.5 rounded-lg bg-gradient-to-t from-indigo-400 via-cyan-400 to-sky-500 shadow-lg\">\r\n                {\" \"}\r\n                <div className=\"flex\r\n          w-full flex-col relative  bg-white p-4 shadow rounded-lg \">\r\n                  <h2 className=\"text-base font-medium text-gray-900\">\r\n                    What would you have done differently if you ran Jurassic\r\n                    Park?\r\n                  </h2>\r\n\r\n                  <div className=\"bg-white rounded-lg my-2\">\r\n                    <DataTable data={tasks} columns={columns} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>;\n}\n_s(MyComponent, \"ptcno2qIRekrGreDrxNRtiF8EcY=\", false, function () {\n  return [useLoaderData];\n});\n_c = MyComponent;\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\components\\\\columns-insight-chat.tsx\"\n);\nimport.meta.hot.lastModified = \"1711201442653.572\";\n}\n// REMIX HMR END\n\nimport { ColumnDef } from \"@tanstack/react-table\";\n\nimport { DataTableColumnHeader } from \"./data-table-column-header-inci\";\nimport { DataTableRowActions } from \"./data-table-row-actions-insight\";\nimport { Badge } from \"./ui/badge\";\nimport { Checkbox } from \"./ui/checkbox\";\nimport { labels, priorities, statuses } from \"../data/insightdata/data\";\nimport { Task } from \"../data/insightdata/schema\";\nimport { Progress } from \"./ui/progress\";\nexport const columns: ColumnDef<Task>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={table.getIsAllPageRowsSelected()}\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"id\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Insight\" />\n    ),\n    cell: ({ row }) => <div className=\"w-[20px]\">{row.getValue(\"id\")}</div>,\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Status\" />\n    ),\n    \n    cell: ({ row }) => {\n   \n      const status = statuses.find(\n        (status) => status.value === row.getValue(\"status\"),\n      );\n\n      if (!status) {\n        return null;\n      }\n\n      return (\n       \n          <div className=\"flex w-[100px] items-center\">\n            {status && status.icon ? (\n              <svg\n                className={`${status.fill} mr-2 h-2 w-2`}\n                viewBox=\"0 0 6 6\"\n                aria-hidden=\"true\"\n              >\n                <circle cx={3} cy={3} r={3} />\n              </svg>\n            ) : null}\n            {status && status.label ? <span>{status.label}</span> : null}{\" \"}\n          </div>\n     \n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    accessorKey: \"module\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Availabilty\" />\n    ),\n    cell: ({ row }) => {\n      const status = statuses.find(\n        (status) => status.value === row.getValue(\"status\"),\n      );\n\n      return (\n        <div>\n          {status ? (\n            <Badge\n              className={`${status.color} ${status.textClr}`}\n              variant=\"outline\"\n            >\n              {row.getValue(\"module\")}\n            </Badge>\n          ) : null}\n        </div>\n      );\n    },\n  },\n  {\n    accessorKey: \"title\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Title\" />\n    ),\n    cell: ({ row }) => {\n      return (\n        <div className=\"flex space-x-2\">\n          <span className=\"max-w-[500px] truncate font-medium \">\n            {row.getValue(\"title\")}\n          </span>\n        </div>\n      );\n    },\n  },\n  \n \n \n  {\n    accessorKey: \"progress\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Projection\" />\n    ),\n    cell: ({ row }) => {\n      return (\n        <div>\n          <Progress\n            indicatorColor={`${\n              Number(row.getValue(\"progress\")) > 50\n                ? \"bg-green-400\"\n                : \"bg-red-400\"\n            }`}\n            value={row.getValue(\"progress\")}\n          />\n        </div>\n      );\n    },\n  },\n\n\n];\n"],
  "mappings": "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",
  "names": ["import_react", "status", "import_jsx_dev_runtime"]
}
