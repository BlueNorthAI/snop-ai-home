{
  "version": 3,
  "sources": ["../../../app/routes/snop.input.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\snop.input.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\snop.input.tsx\");\n  import.meta.hot.lastModified = \"1709182697458.6855\";\n}\n// REMIX HMR END\n\nimport React from \"react\";\nimport { useLoaderData, useNavigate } from \"@remix-run/react\";\nimport { getInput } from \"~/models/input.server\";\nimport { createScenario } from \"~/models/scenario.server\";\nimport { json, redirect } from \"@remix-run/node\";\nimport SnopForm from \"~/components/SnopForm\";\nfunction convertToNumbers(obj) {\n  const numericFields = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"material_cost_pu\", \"inv_hold_cost_pupm\", \"stockout_cost_pupm\", \"hiring_cost_pw\", \"firing_cost_pw\", \"worker_cost_pm\", \"overtime_cost_phr\", \"outsourcing_cost_pu\", \"max_work_hrs_pwpm\", \"max_overtime_hrs_pwpm\", \"inventory_start\", \"inventory_end\", \"backlog_start\", \"backlog_end\", \"num_workers_start\", \"min_end_workers\", \"max_end_workers\", \"labor_hrs_pu\"];\n  const converted = {\n    ...obj\n  };\n  numericFields.forEach(field => {\n    if (converted[field]) {\n      converted[field] = parseFloat(converted[field]);\n    }\n  });\n  return converted;\n}\nexport const loader = async () => {\n  const snopInput = await getInput();\n  // console.log(snopInput);\n\n  return json({\n    snopInput\n  });\n};\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const updates = convertToNumbers(Object.fromEntries(formData));\n  await createScenario(updates);\n  // console.log(updates)\n  return redirect(`/snop/scenario`);\n};\nexport default function SnopInput() {\n  _s();\n  const [date, setDate] = React.useState(new Date());\n  const {\n    snopInput\n  } = useLoaderData();\n  const navigate = useNavigate();\n  return <SnopForm inputData={snopInput} />;\n}\n_s(SnopInput, \"gFr9IggDDycnA3h/uSvZOfvuPeY=\", false, function () {\n  return [useLoaderData, useNavigate];\n});\n_c = SnopInput;\nvar _c;\n$RefreshReg$(_c, \"SnopInput\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAkB;AAElB,mBAAyB;AACzB,sBAA+B;AAC/B,kBAA+B;AAsCtB;AA9DT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,sCAAwC,EAAE;AAAA,EACnF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6B;AAC7B,cAAY,IAAI,eAAe;AACjC;AAsCe,SAAR,YAA6B;AAClC,KAAG;AACH,QAAM,CAAC,MAAM,OAAO,IAAI,aAAAA,QAAM,SAAS,oBAAI,KAAK,CAAC;AACjD,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,WAAW,YAAY;AAC7B,SAAO,mDAAC,YAAS,WAAW,aAArB;AAAA;AAAA;AAAA;AAAA,SAAgC;AACzC;AACA,GAAG,WAAW,gCAAgC,OAAO,WAAY;AAC/D,SAAO,CAAC,eAAe,WAAW;AACpC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,WAAW;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["React"]
}
